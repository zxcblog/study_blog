syntax = "proto3";

package user.v1;

option go_package = "github.com/zxcblog/study-blog/user;user";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "user/token.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// User 用户管理
service User {
  // 服务描述
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "User"
    description: "用户管理"
    external_docs: { //添加服务文档信息
      url: "http://localhost:9090/user.doc"
      description: "查看用户管理功能文档"
    }
  };

  rpc QQRegister(RegisterReq)returns(UserAuthRes){
    option (google.api.http) = {
      post: "/v1/user/register/qq",
      body: "*",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "QQ注册"
      description: "使用QQ号进行注册，已废弃"
      operation_id: "QQRegister"
      deprecated: true // 添加废弃标记
      external_docs: { // 添加单个接口文档信息
        url: "http://localhost:9090/user.doc#qq"
        description: "QQ注册文档信息"
      }

      // 不需要认证
      security:{}

      // 设置请求头信息
      parameters: {
        headers: {
          name: "x-Use-Env",
          description: "使用的环境标识"
          type: STRING
        }
      }

      responses: {
        key: "500"
        value: {
          description: "服务器出现问题了"
          schema: {
            json_schema: {type: STRING}
          }
        }
      }
    };

  }

  rpc Register(RegisterReq)returns(UserAuthRes){
    option (google.api.http) = {
      post: "/v1/user/register",
      body: "*",
    };
  }

  // Login 用户登录
  rpc Login(LoginReq)returns(UserAuthRes){
    option (google.api.http) = {
      post: "/v1/user/login",
      body: "*",
    };
  }
}

// 注册请求
message RegisterReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "RegisterReq";
      description: "注册请求";
      required: ["username","password","confirm_password"],
    }
    external_docs: {
      url: "http://localhost:9090/user.doc#RegisterReq";
      description: "注册请求文档";
    }
    // 请求示例
    example: "{\"username\": \"zhouXiaoChuan\", \"password\": \"123456\", \"confirm_password\":\"123456\", \"email\":\"zxc_7310@163.com\"}"
  };

  string password         = 3[(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) ={
    description: "密码",
    min_length: 6,
    max_length: 20,
    pattern: "^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]+$",
  },(validate.rules).string = {min_len: 1}];// 密码


  string username         = 1[(validate.rules).string = {min_len: 1}]; // 用户名
  string email = 2[(validate.rules).string = {email: true}]; // 邮箱
  string confirm_password = 4; // 确认密码
  string img_cache        = 7; // 图形验证码
}

// 登录类型
enum LoginType {
  Detault_Login = 0; // 邮箱密码登录
  Mobile_Login = 1; // 手机验证码登录
}

// 登录请求
message LoginReq {
  LoginType type  = 1; // 登录类型
  string account  = 2 [(validate.rules).string = {min_len: 1}]; // 账号
  string password = 3; // 认证密码
  string captcha  = 4; // 验证码
  string captcha_id = 5; // 验证码id
}

// 登录注册返回信息
message UserAuthRes {
  user.v1.Auth token_info = 1; // token认证信息
}